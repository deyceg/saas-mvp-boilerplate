/**
 * Generated by orval v6.9.0 üç∫
 * Do not edit manually.
 * REST Api
 * Monolithic SaaS endpoints
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useMutation } from 'react-query';
import type { UseMutationOptions, MutationFunction } from 'react-query';
import type { TokenResponse, SignupRequest } from '../../model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const authControllerSignup = (
  signupRequest: SignupRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TokenResponse>> => {
  return axios.post(`/auth/signup`, signupRequest, options);
};

export type AuthControllerSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignup>>
>;
export type AuthControllerSignupMutationBody = SignupRequest;
export type AuthControllerSignupMutationError = AxiosError<unknown>;

export const useAuthControllerSignup = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignup>>,
    { data: SignupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignup(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >(mutationFn, mutationOptions);
};
