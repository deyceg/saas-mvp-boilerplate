/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * REST Api
 * Monolithic SaaS endpoints
 * OpenAPI spec version: 1.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useMutation, UseMutationOptions, MutationFunction } from "react-query";
import type { LoginResponse, LoginRequest } from "../../models";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const authControllerLogin = (
  loginRequest: LoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LoginResponse>> => {
  return axios.post(`/auth`, loginRequest, options);
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginRequest;
export type AuthControllerLoginMutationError = AxiosError<unknown>;

export const useAuthControllerLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >(mutationFn, mutationOptions);
};
